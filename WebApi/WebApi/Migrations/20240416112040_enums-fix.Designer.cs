// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Data;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20240416112040_enums-fix")]
    partial class enumsfix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("achievements_hilo");

            modelBuilder.HasSequence<int>("active_effects_hilo");

            modelBuilder.HasSequence<int>("ads_hilo");

            modelBuilder.HasSequence<int>("adventure_templates_hilo");

            modelBuilder.HasSequence<int>("adventures_hilo");

            modelBuilder.HasSequence("advertisement_stats_hilo");

            modelBuilder.HasSequence<int>("balances_hilo");

            modelBuilder.HasSequence<int>("black_lists_hilo");

            modelBuilder.HasSequence<int>("encounters_hilo");

            modelBuilder.HasSequence<int>("feedbacks_hilo");

            modelBuilder.HasSequence<int>("invitations_hilo");

            modelBuilder.HasSequence<int>("notifications_hilo");

            modelBuilder.HasSequence<int>("reports_hilo");

            modelBuilder.HasSequence<int>("requests_hilo");

            modelBuilder.HasSequence("tags_hilo");

            modelBuilder.HasSequence("test_answers_hilo");

            modelBuilder.HasSequence("test_questions_hilo");

            modelBuilder.HasSequence("test_results_hilo");

            modelBuilder.HasSequence<int>("test_scales_hilo");

            modelBuilder.HasSequence("tests_hilo");

            modelBuilder.HasSequence<int>("tick_requests_hilo");

            modelBuilder.HasSequence<int>("transactions_hilo");

            modelBuilder.Entity("WebApi.Main.Entities.Achievement.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "achievements_hilo");

                    b.Property<byte>("Language")
                        .HasColumnType("smallint");

                    b.Property<int>("ConditionValue")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Reward")
                        .HasColumnType("integer");

                    b.HasKey("Id", "Language");

                    b.ToTable("achievements", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Achievement.UserAchievement", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer");

                    b.Property<byte>("AchievementLanguage")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAcquired")
                        .HasColumnType("boolean");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId", "AchievementLanguage");

                    b.ToTable("user_achievements", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Admin.VerificationRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "tick_requests_hilo");

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<short>("ConfirmationType")
                        .HasColumnType("smallint");

                    b.Property<string>("Gesture")
                        .HasColumnType("text");

                    b.Property<string>("Media")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("MediaType")
                        .HasColumnType("smallint");

                    b.Property<short?>("State")
                        .HasColumnType("smallint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("verification_requests", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Adventure.Adventure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "adventures_hilo");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<string>("Application")
                        .HasColumnType("text");

                    b.Property<string>("AttendeesDescription")
                        .HasColumnType("text");

                    b.Property<string>("AutoReply")
                        .HasColumnType("text");

                    b.Property<byte?>("CityCountryLang")
                        .HasColumnType("smallint");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<byte?>("CountryLang")
                        .HasColumnType("smallint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("Experience")
                        .HasColumnType("text");

                    b.Property<string>("Gratitude")
                        .HasColumnType("text");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupLink")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAutoReplyText")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAwaiting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOffline")
                        .HasColumnType("boolean");

                    b.Property<string>("Media")
                        .HasColumnType("text");

                    b.Property<short>("MediaType")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Time")
                        .HasColumnType("text");

                    b.Property<string>("UniqueLink")
                        .HasColumnType("text");

                    b.Property<string>("UnwantedAttendeesDescription")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CityId", "CityCountryLang");

                    b.HasIndex("CountryId", "CountryLang");

                    b.ToTable("adventures", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Adventure.AdventureAttendee", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdventureId")
                        .HasColumnType("bigint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserId", "AdventureId");

                    b.HasIndex("AdventureId");

                    b.ToTable("adventure_attendees", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Adventure.AdventureTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "adventure_templates_hilo");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Application")
                        .HasColumnType("text");

                    b.Property<string>("AttendeesDescription")
                        .HasColumnType("text");

                    b.Property<string>("AutoReply")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("Experience")
                        .HasColumnType("text");

                    b.Property<string>("Gratitude")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAutoReplyText")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOffline")
                        .HasColumnType("boolean");

                    b.Property<string>("Media")
                        .HasColumnType("text");

                    b.Property<short>("MediaType")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Time")
                        .HasColumnType("text");

                    b.Property<string>("UnwantedAttendeesDescription")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("adventure_templates", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.DailyReward.DailyReward", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("Index")
                        .HasColumnType("smallint");

                    b.Property<int>("PointReward")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("daily_rewards", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Effect.ActiveEffect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "active_effects_hilo");

                    b.Property<short>("Effect")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("active_effects", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Hint.Hint", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<byte>("Localization")
                        .HasColumnType("smallint");

                    b.Property<short?>("Section")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id", "Localization");

                    b.ToTable("hints", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Language.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<byte>("Lang")
                        .HasColumnType("smallint");

                    b.Property<string>("LanguageName")
                        .HasColumnType("text");

                    b.Property<string>("LanguageNameNative")
                        .HasColumnType("text");

                    b.Property<short?>("Priority")
                        .HasColumnType("smallint");

                    b.HasKey("Id", "Lang");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<byte>("CountryLang")
                        .HasColumnType("smallint");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.HasKey("Id", "CountryLang");

                    b.HasIndex("CountryId", "CountryLang");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Location.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<byte>("Lang")
                        .HasColumnType("smallint");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short?>("Priority")
                        .HasColumnType("smallint");

                    b.HasKey("Id", "Lang");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Location.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte?>("CityCountryLang")
                        .HasColumnType("smallint");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<byte?>("CountryLang")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CityId", "CityCountryLang");

                    b.HasIndex("CountryId", "CountryLang");

                    b.ToTable("user_locations", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.PromoCode.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardDeckMini")
                        .HasColumnType("integer");

                    b.Property<int>("CardDeckPlatinum")
                        .HasColumnType("integer");

                    b.Property<int>("Nullifier")
                        .HasColumnType("integer");

                    b.Property<int>("PersonalityPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("Promo")
                        .HasColumnType("text");

                    b.Property<int>("SecondChance")
                        .HasColumnType("integer");

                    b.Property<int>("TheDetector")
                        .HasColumnType("integer");

                    b.Property<int>("TheValentine")
                        .HasColumnType("integer");

                    b.Property<bool>("UsedOnlyInRegistration")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("promocodes", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Report.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "feedbacks_hilo");

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InsertedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Reason")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Report.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "reports_hilo");

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AdventureId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InsertedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Reason")
                        .HasColumnType("smallint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("user_reports", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Sponsor.Advertisement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "ads_hilo");

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Media")
                        .HasColumnType("text");

                    b.Property<short>("MediaType")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<bool>("Show")
                        .HasColumnType("boolean");

                    b.Property<string>("TargetAudience")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<bool>("Updated")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("advertisements", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Sponsor.AdvertisementStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "advertisement_stats_hilo");

                    b.Property<long>("AdvertisementId")
                        .HasColumnType("bigint");

                    b.Property<int>("AverageStayInSeconds")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<float>("Income")
                        .HasColumnType("real");

                    b.Property<int>("LinkClickCount")
                        .HasColumnType("integer");

                    b.Property<float>("Payback")
                        .HasColumnType("real");

                    b.Property<float>("PeoplePercentage")
                        .HasColumnType("real");

                    b.Property<float>("PricePerClick")
                        .HasColumnType("real");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetAudience")
                        .HasColumnType("text");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("advertisement_statistics", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Tag.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "tags_hilo");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<long?>("FatherId")
                        .HasColumnType("bigint");

                    b.Property<short?>("FatherType")
                        .HasColumnType("smallint");

                    b.Property<long?>("MotherId")
                        .HasColumnType("bigint");

                    b.Property<short?>("MotherType")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id", "Type");

                    b.HasIndex("FatherId", "FatherType");

                    b.HasIndex("MotherId", "MotherType");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "tests_hilo");

                    b.Property<byte>("Language")
                        .HasColumnType("smallint");

                    b.Property<int>("CanBePassedInDays")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short?>("TestType")
                        .HasColumnType("smallint");

                    b.HasKey("Id", "Language");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.TestAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "test_answers_hilo");

                    b.Property<List<long>>("Tags")
                        .HasColumnType("bigint[]");

                    b.Property<long>("TestQuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("tests_answers", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.TestQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "test_questions_hilo");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TestLanguage")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId", "TestLanguage");

                    b.ToTable("tests_questions", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.TestResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "test_results_hilo");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<List<long>>("Tags")
                        .HasColumnType("bigint[]");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TestLanguage")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TestId", "TestLanguage");

                    b.ToTable("tests_results", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.TestScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "test_scales_hilo");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MinValue")
                        .HasColumnType("integer");

                    b.Property<string>("Scale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("TestLanguage")
                        .HasColumnType("smallint");

                    b.HasKey("Id", "TestId");

                    b.HasIndex("TestId", "TestLanguage");

                    b.ToTable("tests_scales", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Balance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "balances_hilo");

                    b.Property<int>("CardDecksMini")
                        .HasColumnType("integer");

                    b.Property<int>("CardDecksPlatinum")
                        .HasColumnType("integer");

                    b.Property<short?>("Currency")
                        .HasColumnType("smallint");

                    b.Property<int>("Detectors")
                        .HasColumnType("integer");

                    b.Property<int>("Nullifiers")
                        .HasColumnType("integer");

                    b.Property<int>("OceanPoints")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PointInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Points")
                        .HasColumnType("real");

                    b.Property<int>("SecondChances")
                        .HasColumnType("integer");

                    b.Property<int>("ThePersonalities")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Valentines")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("balances", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.BlackList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "black_lists_hilo");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("BannedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("BannedUserId");

                    b.ToTable("black_lists", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Encounter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "encounters_hilo");

                    b.Property<DateTime>("EncounterDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EncounteredUserId")
                        .HasColumnType("bigint");

                    b.Property<short>("Section")
                        .HasColumnType("smallint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EncounteredUserId");

                    b.HasIndex("UserId");

                    b.ToTable("encounters", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Invitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "invitations_hilo");

                    b.Property<DateTime>("InvitationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("InvitedUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InviterCredentialsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InviterCredentialsId");

                    b.ToTable("invitations", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.InvitationCredentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("invitation_credentials", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.OceanPoints", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<float>("Agreeableness")
                        .HasColumnType("real");

                    b.Property<float>("AgreeablenessPercentage")
                        .HasColumnType("real");

                    b.Property<float>("Conscientiousness")
                        .HasColumnType("real");

                    b.Property<float>("ConscientiousnessPercentage")
                        .HasColumnType("real");

                    b.Property<float>("Extroversion")
                        .HasColumnType("real");

                    b.Property<float>("ExtroversionPercentage")
                        .HasColumnType("real");

                    b.Property<float>("Nature")
                        .HasColumnType("real");

                    b.Property<float>("NaturePercentage")
                        .HasColumnType("real");

                    b.Property<float>("Neuroticism")
                        .HasColumnType("real");

                    b.Property<float>("NeuroticismPercentage")
                        .HasColumnType("real");

                    b.Property<float>("Openness")
                        .HasColumnType("real");

                    b.Property<float>("OpennessPercentage")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.ToTable("ocean_points", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.OceanStats", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<float>("Agreeableness")
                        .HasColumnType("real");

                    b.Property<float>("Conscientiousness")
                        .HasColumnType("real");

                    b.Property<float>("Extroversion")
                        .HasColumnType("real");

                    b.Property<float>("Nature")
                        .HasColumnType("real");

                    b.Property<float>("Neuroticism")
                        .HasColumnType("real");

                    b.Property<float>("Openness")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.ToTable("ocean_stats", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Request", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "requests_hilo");

                    b.Property<short?>("Answer")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("AnsweredTimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMatch")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("SystemMessage")
                        .HasColumnType("text");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("requests", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IncreasedFamiliarity")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldConsiderLanguages")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldFilterUsersWithoutRealPhoto")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldSendHints")
                        .HasColumnType("boolean");

                    b.Property<bool>("UsesOcean")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("user_settings", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Statistics", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("DiscardedMatches")
                        .HasColumnType("integer");

                    b.Property<int>("DislikedProfiles")
                        .HasColumnType("integer");

                    b.Property<int>("HighSimilarityEncounters")
                        .HasColumnType("integer");

                    b.Property<int>("IdeasGiven")
                        .HasColumnType("integer");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("LikesReceived")
                        .HasColumnType("integer");

                    b.Property<int>("Matches")
                        .HasColumnType("integer");

                    b.Property<int>("ProfileRegistrations")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionerPasses")
                        .HasColumnType("integer");

                    b.Property<int>("TestsPassed")
                        .HasColumnType("integer");

                    b.Property<int>("UseStreak")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("user_statistics", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "transactions_hilo");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<short>("Currency")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("PointInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.TrustLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Goal")
                        .HasColumnType("double precision");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<double>("Progress")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("trust_levels", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AdventureSearchCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BanDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("BonusIndex")
                        .HasColumnType("real");

                    b.Property<short>("DailyRewardPoint")
                        .HasColumnType("smallint");

                    b.Property<long>("DataId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnteredPromoCodes")
                        .HasColumnType("text");

                    b.Property<bool>("HadReceivedReward")
                        .HasColumnType("boolean");

                    b.Property<short>("IdentityType")
                        .HasColumnType("smallint");

                    b.Property<float>("InvitedUsersBonus")
                        .HasColumnType("real");

                    b.Property<int>("InvitedUsersCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDecoy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSponsor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxAdventureSearchCount")
                        .HasColumnType("integer");

                    b.Property<int>("MaxProfileViewsCount")
                        .HasColumnType("integer");

                    b.Property<int>("MaxRTViewsCount")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTagSearchCount")
                        .HasColumnType("integer");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<short?>("PremiumDuration")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("PremiumExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProfileViewsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RTViewsCount")
                        .HasColumnType("integer");

                    b.Property<short>("ReportCount")
                        .HasColumnType("smallint");

                    b.Property<long>("SettingsId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShouldEnhance")
                        .HasColumnType("boolean");

                    b.Property<int>("TagSearchesCount")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SettingsId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.UserData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<int>>("AgePrefs")
                        .HasColumnType("integer[]");

                    b.Property<string>("AutoReplyText")
                        .HasColumnType("text");

                    b.Property<string>("AutoReplyVoice")
                        .HasColumnType("text");

                    b.Property<byte>("CommunicationPrefs")
                        .HasColumnType("smallint");

                    b.Property<byte>("Language")
                        .HasColumnType("smallint");

                    b.Property<List<int>>("LanguagePreferences")
                        .HasColumnType("integer[]");

                    b.Property<List<int>>("LocationPreferences")
                        .HasColumnType("integer[]");

                    b.Property<short>("MediaType")
                        .HasColumnType("smallint");

                    b.Property<short>("Reason")
                        .HasColumnType("smallint");

                    b.Property<int>("UserAge")
                        .HasColumnType("integer");

                    b.Property<string>("UserDescription")
                        .HasColumnType("text");

                    b.Property<byte>("UserGender")
                        .HasColumnType("smallint");

                    b.Property<byte>("UserGenderPrefs")
                        .HasColumnType("smallint");

                    b.Property<List<int>>("UserLanguages")
                        .HasColumnType("integer[]");

                    b.Property<string>("UserMedia")
                        .HasColumnType("text");

                    b.Property<string>("UserRawDescription")
                        .HasColumnType("text");

                    b.Property<string>("UserRealName")
                        .HasColumnType("text");

                    b.Property<string>("UserStory")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("user_data", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.UserNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "notifications_hilo");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<short>("Section")
                        .HasColumnType("smallint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .HasColumnType("varchar");

                    b.HasKey("UserId", "Role");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.UserTag", b =>
                {
                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<short>("TagType")
                        .HasColumnType("smallint");

                    b.HasKey("TagId", "UserId", "TagType");

                    b.HasIndex("UserId");

                    b.HasIndex("TagId", "TagType");

                    b.ToTable("user_tags", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.UserTest", b =>
                {
                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PassedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Result")
                        .HasColumnType("real");

                    b.Property<byte>("TestLanguage")
                        .HasColumnType("smallint");

                    b.Property<short?>("TestType")
                        .HasColumnType("smallint");

                    b.HasKey("TestId", "UserId");

                    b.HasIndex("TestId", "TestLanguage");

                    b.ToTable("user_tests", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Visit", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<short>("Section")
                        .HasColumnType("smallint");

                    b.HasKey("UserId", "Section");

                    b.ToTable("user_visits", (string)null);
                });

            modelBuilder.Entity("WebApi.Main.Entities.Achievement.UserAchievement", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Main.Entities.Achievement.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId", "AchievementLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Admin.VerificationRequest", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Adventure.Adventure", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "Creator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Main.Entities.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId", "CityCountryLang");

                    b.HasOne("WebApi.Main.Entities.Location.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId", "CountryLang");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Adventure.AdventureAttendee", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Adventure.Adventure", "Adventure")
                        .WithMany("Attendees")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Location.City", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Location.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryId", "CountryLang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Main.Entities.Location.Location", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId", "CityCountryLang");

                    b.HasOne("WebApi.Main.Entities.Location.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId", "CountryLang");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Report.Feedback", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Report.Report", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Adventure.Adventure", "Adventure")
                        .WithMany()
                        .HasForeignKey("AdventureId");

                    b.HasOne("WebApi.Main.Entities.User.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Main.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Adventure");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Sponsor.Advertisement", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Sponsor.AdvertisementStats", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Sponsor.Advertisement", "Advertisement")
                        .WithMany("AdvertisementStats")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Tag.Tag", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Tag.Tag", "Father")
                        .WithMany()
                        .HasForeignKey("FatherId", "FatherType");

                    b.HasOne("WebApi.Main.Entities.Tag.Tag", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherId", "MotherType");

                    b.Navigation("Father");

                    b.Navigation("Mother");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.TestAnswer", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Test.TestQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.TestQuestion", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Test.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId", "TestLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.TestResult", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Test.Test", null)
                        .WithMany("Results")
                        .HasForeignKey("TestId", "TestLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.TestScale", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Test.Test", null)
                        .WithMany("Scales")
                        .HasForeignKey("TestId", "TestLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.BlackList", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "BannedUser")
                        .WithMany("BlackList")
                        .HasForeignKey("BannedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BannedUser");
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Encounter", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "EncounteredUser")
                        .WithMany()
                        .HasForeignKey("EncounteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Main.Entities.User.User", "User")
                        .WithMany("Encounters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EncounteredUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Invitation", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.InvitationCredentials", "InviterCredentials")
                        .WithMany()
                        .HasForeignKey("InviterCredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InviterCredentials");
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.InvitationCredentials", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "Inviter")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Request", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Main.Entities.User.User", "Receiver")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.Statistics", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", null)
                        .WithOne("Statistics")
                        .HasForeignKey("WebApi.Main.Entities.User.Statistics", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.User", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.UserData", "Data")
                        .WithMany()
                        .HasForeignKey("DataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Main.Entities.Location.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Main.Entities.User.Settings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Data");

                    b.Navigation("Location");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.UserNotification", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.UserRole", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.UserTag", b =>
                {
                    b.HasOne("WebApi.Main.Entities.User.User", null)
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Main.Entities.Tag.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId", "TagType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.UserTest", b =>
                {
                    b.HasOne("WebApi.Main.Entities.Test.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId", "TestLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Adventure.Adventure", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Location.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Sponsor.Advertisement", b =>
                {
                    b.Navigation("AdvertisementStats");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Results");

                    b.Navigation("Scales");
                });

            modelBuilder.Entity("WebApi.Main.Entities.Test.TestQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("WebApi.Main.Entities.User.User", b =>
                {
                    b.Navigation("BlackList");

                    b.Navigation("Encounters");

                    b.Navigation("Notifications");

                    b.Navigation("Requests");

                    b.Navigation("Statistics");

                    b.Navigation("Tags");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
