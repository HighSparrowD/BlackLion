using System.Threading.Tasks;
using System.Collections.Generic;
using MyWebApi.Entities.UserInfoEntities;
using MyWebApi.Entities.SecondaryEntities;
using MyWebApi.Entities.ReportEntities;
using MyWebApi.Entities.LocationEntities;
using MyWebApi.Entities.ReasonEntities;
using MyWebApi.Entities.AchievementEntities;
using System;
using MyWebApi.Entities.UserActionEntities;
using MyWebApi.Entities.SponsorEntities;

namespace MyWebApi.Interfaces
{
    public interface IUserRepository
    {
        Task<bool> CheckUserIsRegistered(long userId);
        Task<bool> CheckUserHasVisitedSection(long userId, int sectionId);
        Task<bool> CheckUserIsBusy(long userId);
        Task<bool> CheckUserHasRequests(long userId);
        Task<bool> SwhitchUserBusyStatus(long userId);
        Task<bool> CheckUserIsBanned(long userId);
        Task<bool> CheckUserIsDeleted(long userId);
        Task<bool> SetDebugProperties(); //TODO: remove in production
        Task<User> GetUserInfoAsync(long id);
        Task<List<UserNotification>> GetUserRequests(long userId);
        Task<UserNotification> GetUserRequest(long requestId);
        bool CheckRequestExists(long senderId, long recieverId);
        Task<long> RegisterUserRequest(UserNotification request);
        Task<byte> DeleteUserRequests(long userId);
        Task<byte> DeleteUserRequest(long requestId);
        Task<User> GetUserInfoByUsrnameAsync(string username);
        Task<byte> UpdateUserAppLanguageAsync(long userId, int appLanguage);
        Task<byte> UpdateUserBaseAsync(UserBaseInfo user);
        Task<byte> UpdateUserDataAsync(UserDataInfo user);
        Task<byte> UpdateUserPreferencesAsync(UserPreferences user);
        Task<byte> UpdateUserLocationAsync(Location location);
        Task<UserBaseInfo> GetUserBaseInfoAsync(long id);
        Task<List<User>> GetUsersAsync(long userId);
        Task<bool> CheckUserExists(long id);
        Task<int> GetUserAppLanguage(long id);
        Task<User> GetFriendInfoAsync(long id);
        Task<List<FriendModel>> GetFriendsAsync();
        Task<long> RegisterUserAsync(User model, UserBaseInfo baseModel, UserDataInfo dataModel, UserPreferences prefsModel, Location location, bool wasRegistered=false);
        Task<long> AddFriendUserAsync(long id);
        Task<Country> GetCountryAsync(long id);
        Task<List<long>> GetAllUsersAsync();
        Task<List<FeedbackReason>> GetFeedbackReasonsAsync(int localisationId);
        Task<List<ReportReason>> GetReportReasonsAsync(int localisationId);
        Task<long> AddFeedbackAsync(Feedback report);
        Task<long> AddUserReportAsync(Report report);
        Task<List<Report>> GetMostRecentReports();
        Task<Report> GetSingleUserReportByIdAsync(long id);
        Task<List<Report>> GetAllReportsOnUserAsync(long userId);
        Task<List<Report>> GetAllUserReportsAsync(long userId);
        Task<List<Feedback>> GetMostRecentFeedbacks();
        Task<Feedback> GetFeedbackById(long id);
        Task<List<Feedback>> GetMostRecentFeedbacksByUserId(long userId);
        Task<long> AddUserToBlackListAsync(long userId, long bannedUserId);
        Task<long> RemoveUserFromBlackListAsync(long userId, long bannedUserId);
        Task<byte> RemoveUserAsync(long userId);
        Task<byte> ReRegisterUser(long userId);
        Task<byte> BanUserAsync(long userId);
        Task<byte> UnbanUserAsync(long userId);
        Task<byte> GenerateUserAchievementList(long userId, int localisationId, bool wasRegistered);
        Task<string> AddAchievementProgress(long userId, long achievementId, int progress);
        Task<string> GrantAchievementToUser(long userId, long achievementId);
        Task<List<UserAchievement>> GetUserAchievements(long userId);
        Task<List<UserAchievement>> GetUserAchievementsAsAdmin(long userId);
        Task<UserAchievement> GetSingleUserAchievement(long userId, long achievementId);
        Task<bool> SetUserRtLanguagePrefs(long userId, bool shouldBeConcidered);
        Task<bool> CheckUsersAreCombinableRT(long user1, long user2);
        Task<Balance> GetUserWalletBalance(long userId, DateTime pointInTime);
        Task<int> TopUpUserWalletBalance(long userId, int points, string description);
        Task<bool> CheckUserHasPremium(long userId);
        Task<bool> CheckBalanceIsSufficient(long userId, int cost);
        Task<DateTime> GetPremiumExpirationDate(long userId);
        Task<DateTime> GrantPremiumToUser(long userId, int cost, int dayDuration);
        Task<long> RegisterUserEncounter(Encounter model);
        Task<Encounter> GetUserEncounter(long userId, long encounterId, int sectionId);
        Task<List<Encounter>> GetUserEncounters(long userId, int sectionId);
        Task<int> AddUserTrustProgressAsync(long userId, double progress);
        Task<int> UpdateUserTrustLevelAsync(long userId, int level);
        Task<UserTrustLevel> GetUserTrustLevel(long userId);
        Task<List<Event>> GetEventList(long userId, bool IsOnline);
        Task<bool> UpdateUserNickname(long userId, string nickname);
        Task<string> GetUserNickname(long userId);
        Task<string> ClaimDailyReward(long userId);
        Task<bool> CheckUserCanClaimReward(long userId);
        Task<short> GetUserBonusIndex(long userId);
        Task<InvitationCredentials> GenerateInvitationCredentialsAsync(long userId);
        Task<InvitationCredentials> GetInvitationCredentialsByUserIdAsync(long userId);
        Task<string> GetUserInvitationLinkAsync(long userId);
        Task<string> GetUserInvitationQRCodeAsync(long userId);
        Task<bool> InviteUserAsync(Guid invitationId, long userId);
        Task<Invitation> GetInvitationAsync(long userId);
        Task<bool> NotifyUserAboutReferentialRegistrationAsync(long userId, long invitedUserId);
        Task<bool> AddUserNotificationAsync(UserNotification model);
        Task<int> GetInvitedUsersCountAsync(long userId);
        Task<bool> CheckUserHasNotificationsAsync(long userId);
        Task<List<UserNotification>> GetUserNotifications(long userId);
        Task<bool> DeleteUserNotification(long notificationId);
        Task<List<UserAchievement>> GetRandomAchievements(long userId);
        Task<double> CalculateSimilarityAsync(double param1, double param2);
    }
}
