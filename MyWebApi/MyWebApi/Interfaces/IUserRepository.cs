using System.Threading.Tasks;
using System.Collections.Generic;
using WebApi.Entities.UserInfoEntities;
using WebApi.Entities.ReportEntities;
using WebApi.Entities.LocationEntities;
using WebApi.Entities.ReasonEntities;
using WebApi.Entities.AchievementEntities;
using System;
using WebApi.Entities.UserActionEntities;
using WebApi.Entities.SponsorEntities;
using WebApi.Entities.DailyTaskEntities;
using WebApi.Enums;
using WebApi.Entities.TestEntities;
using WebApi.Entities.EffectEntities;
using WebApi.Entities.AdventureEntities;

namespace WebApi.Interfaces
{
    public interface IUserRepository
    {
        Task<bool> CheckUserIsRegistered(long userId);
        Task<bool> CheckUserHasVisitedSection(long userId, int sectionId);
        Task<bool> CheckUserIsBusy(long userId);
        Task<bool> CheckUserHasRequests(long userId);
        Task<bool> CheckUserIsBanned(long userId);
        Task<bool> CheckUserIsDeleted(long userId);
        Task<bool> SetDebugProperties(); //TODO: remove in production
        Task<User> GetUserInfoAsync(long id);
        Task<List<UserNotification>> GetUserRequests(long userId);
        Task<UserNotification> GetUserRequest(long requestId);
        bool CheckRequestExists(long senderId, long recieverId);
        Task<string> RegisterUserRequestAsync(UserNotification request);
        Task<string> DeclineRequestAsync(long user1, long user2);
        Task<byte> DeleteUserRequests(long userId);
        Task<byte> DeleteUserRequest(long requestId);
        Task<User> GetUserInfoByUsrnameAsync(string username);
        Task<BasicUserInfo> GetUserBasicInfo(long userId);
        Task<UserPartialData> GetUserPartialData(long userId);
        Task<byte> UpdateUserAppLanguageAsync(long userId, AppLanguage appLanguage);
        Task UpdateUserAsync (UpdateUserProfile model);
        Task<List<GetUserData>> GetUsersAsync(long userId, bool isRepeated=false, bool isFreeSearch = false);
        Task<bool> CheckUserExists(long id);
        Task<int> GetUserAppLanguage(long id);
        Task<long> RegisterUserAsync(UserRegistrationModel model, bool wasRegistered=false);
        Task<Country> GetCountryAsync(long id);
        Task<List<FeedbackReason>> GetFeedbackReasonsAsync(int localisationId);
        //Task<List<ReportReason>> GetReportReasonsAsync(int localisationId);
        Task<long> AddFeedbackAsync(Feedback report);
        Task<long> AddUserReportAsync(SendUserReport report);
        Task<List<Report>> GetMostRecentReports();
        Task<Report> GetSingleUserReportByIdAsync(long id);
        Task<List<Report>> GetAllReportsOnUserAsync(long userId);
        Task<List<Report>> GetAllUserReportsAsync(long userId);
        Task<List<Feedback>> GetMostRecentFeedbacks();
        Task<Feedback> GetFeedbackById(long id);
        List<GetLocalizedEnum> GetGenders();
        Task<List<Feedback>> GetMostRecentFeedbacksByUserId(long userId);
        Task<bool> AddUserToBlackListAsync(long userId, long bannedUserId);
        Task<bool> RemoveUserFromBlackListAsync(long userId, long bannedUserId);
        Task<List<BlackList>> GetBlackList (long userId);
        Task<byte> RemoveUserAsync(long userId);
        Task<byte> ReRegisterUser(long userId);
        Task<byte> BanUserAsync(long userId);
        Task<byte> UnbanUserAsync(long userId);
        Task<byte> GenerateUserAchievementList(long userId, AppLanguage localisationId, bool wasRegistered);
        Task<string> AddAchievementProgress(long userId, long achievementId, int progress);
        Task<string> GrantAchievementToUser(long userId, long achievementId);
        Task<List<UserAchievement>> GetUserAchievements(long userId);
        Task<List<UserAchievement>> GetUserAchievementsAsAdmin(long userId);
        Task<UserAchievement> GetSingleUserAchievement(long userId, long achievementId);
        Task<bool> SetUserRtLanguagePrefs(long userId, bool shouldBeConcidered);
        Task<bool> CheckUsersAreCombinableRT(long user1, long user2);
        Task<Balance> GetUserWalletBalance(long userId);
        Task<int> TopUpUserWalletPointsBalance(long userId, int points, string description);
        Task<int> TopUpUserWalletPPBalance(long userId, int points, string description);
        Task<bool> CheckUserHasPremiumAsync(long userId);
        Task<bool> CheckBalanceIsSufficient(long userId, int cost);
        Task<DateTime> GetPremiumExpirationDate(long userId);
        Task<DateTime> GrantPremiumToUser(long userId, int cost, int dayDuration, short currency);
        Task<long?> RegisterUserEncounter(Encounter model);
        Task<Encounter> GetUserEncounter(long encounterId);
        Task<List<Encounter>> GetUserEncounters(long userId, Section section);
        Task<int> AddUserTrustProgressAsync(long userId, double progress);
        Task<int> UpdateUserTrustLevelAsync(long userId, int level);
        Task<UserTrustLevel> GetUserTrustLevel(long userId);
        Task<bool> UpdateUserNickname(long userId, string nickname);
        Task<string> GetUserNickname(long userId);
        Task<string> ClaimDailyReward(long userId);
        Task<bool> CheckUserCanClaimReward(long userId);
        Task<short> GetUserBonusIndex(long userId);
        Task<InvitationCredentials> GenerateInvitationCredentialsAsync(long userId);
        Task<InvitationCredentials> GetInvitationCredentialsByUserIdAsync(long userId);
        Task<string> GetQRCode(long userId);
        Task<string> GetUserInvitationLinkAsync(long userId);
        Task<string> GetUserInvitationQRCodeAsync(long userId);
        Task<bool> InviteUserAsync(Guid invitationId, long userId);
        Task<Invitation> GetInvitationAsync(long userId);
        Task<bool> NotifyUserAboutReferentialRegistrationAsync(long userId, long invitedUserId);
        Task<long> AddUserNotificationAsync(UserNotification model);
        Task<int> GetInvitedUsersCountAsync(long userId);
        Task<bool> CheckUserHasNotificationsAsync(long userId);
        Task<List<UserNotification>> GetUserNotifications(long userId);
        Task<List<long>> GetUserNotificationsIdsAsync(long userId);
        Task<UserNotification> GetUserNotificationAsync(Guid notificationId);
        Task<byte> SendNotificationConfirmationCodeAsync(Guid notidicationId);
        Task<bool> DeleteUserNotification(Guid notificationId);
        Task<bool> DeleteUserNotification(UserNotification notification);
        Task<List<string>> GetRandomAchievements(long userId);
        Task<double> CalculateSimilarityAsync(double param1, double param2);
        Task<DailyTask> GetDailyTaskByIdAsync(long id);
        Task<UserDailyTask> GetUserDailyTaskByIdAsync(long userId, long taskId);
        Task<int> UpdateUserDailyTaskProgressAsync(long userId, long id, int progress);
        Task<int> GiveDailyTaskRewardToUserAsync(long userId, long taskId);
        Task<int> GiveDailyTaskRewardToUserAsync(long userId, UserDailyTask task);
        Task<bool> CheckUserHasTasksInSectionAsync(long userId, int sectionId);
        Task<byte> GenerateUserDailyTaskListAsync(long userId);
        Task<string> ShowDailyTaskProgressAsync(long userId, long taskId);
        Task<int> GetUserMaximumLanguageCountAsync(long userId);
        int GetMaximumLanguageCount(bool? hasPremium);
        Task<int> GetUserPersonalityPointsAmount(long userId);
        Task<bool> UpdateUserPersonalityStats(TestPayload model);
        Task<bool> UpdateUserPersonalityPoints(PointsPayload model);
        Task<UserPersonalityStats> GetUserPersonalityStats(long userId);
        Task<UserPersonalityPoints> GetUserPersonalityPoints(long userId);
        Task<bool?> CheckUserUsesPersonality(long userId);
        Task<bool> RegisterTestPassingAsync(TestPayload model, int testResult);
        Task<bool> UpdateTags(UpdateTags model);
        Task<List<UserTag>> GetTags(long userId);
        Task<GetUserData> GetUserListByTagsAsync(GetUserByTags model);
        Task<bool> CheckEncounteredUserIsInBlackList(long userId, long encounteredUser);
        Task<string> RetreiveCommonLanguagesAsync(long user1Iq, long user2Id, int localisationId);
        Task<bool> SetAutoReplyTextAsync(long userId, string text);
        Task<bool> SetAutoReplyVoiceAsync(long userId, string voice);
        Task<ActiveAutoReply> GetActiveAutoReplyAsync(long userId);
        Task<bool> CheckUserHasEffectAsync(long userId, int effectId);
        Task<DateTime?> ActivateDurableEffectAsync(long userId, int effectId);
        Task<bool> ActivateToggleEffectAsync(long userId, int effectId, long? user2Id=null, string description=null);
        Task<List<ActiveEffect>> GetUserActiveEffects(long userId);
        Task<bool> DeactivateEffectAsync(long userId, long activeEffectId);
        Task<bool> CheckEffectIsActiveAsync(long userId, int effectId);
        Task<bool> PurchaseEffectAsync(long userId, int effectId, int points, short currency, short count=1);
        Task<bool> PurchasePersonalityPointsAsync(long userId, int points, short currency, short count=1);
        Task<bool> SendTickRequestAsync(SendTickRequest request);
        Task<bool> SwitchUserFilteringByPhotoAsync(long userId);
        Task<bool> GetUserFilteringByPhotoStatusAsync(long userId);
        Task<List<GetTestShortData>> GetTestDataByPropertyAsync(long userId, short param);
        Task<List<GetTestShortData>> GetUserTestDataByPropertyAsync(long userId, short param);
        Task<GetFullTestData> GetTestFullDataByIdAsync(long testId, AppLanguage localisation);
        Task<GetUserTest> GetUserTestAsync(long userId, long testId);
        Task<int> GetPossibleTestPassRangeAsync(long userId, long testId);
        Task<bool> PurchaseTestAsync(long userId, long testId, AppLanguage localisation);
        Task<string> CheckTickRequestStatusÀsync(long userId);
        Task<bool> CheckUserHaveChosenFreeParamAsync(long userId);
        Task<bool> CheckShouldTurnOffPersonalityAsync(long userId);
        Task<bool> SetUserFreeSearchParamAsync(long userId, bool freeStatus);
        List<GetLocalizedEnum> GetReportReasonsAsync();
        //Get stats user can invest points in
        Task<PersonalityCaps> GetUserPersonalityCapsAsync(long userId);
        Task<bool> GetUserRTLanguageConsiderationAsync(long userId);
        Task SetUserCurrencyAsync(long userId, short currency);
        Task<GetUserData> GetRequestSenderAsync(long requestId);
        Task<bool> CheckPromoIsCorrectAsync(long userId, string promoText, bool isActivatedBeforeRegistration);
        Task<bool> GetUserIncreasedFamiliarityAsync(long userId);
        Task<bool> SwitchIncreasedFamiliarityAsync(long userId);
        Task<bool> AddUserCommercialVector(long userId, string tagString);
        Task<SimilarityBetweenUsers> GetSimilarityBetweenUsersAsync(long user1, long user2);
        Task<GetUserMedia> GetUserMediaAsync(long userId);
        Task<GetLimitations> GetUserSearchLimitations(long userId);

        //Toggle Settings 
        Task SwitchHintsVisibilityAsync(long userId);
        Task<bool> SwitchPersonalityUsage(long userId);
        Task<SwitchBusyStatusResponse> SwhitchUserBusyStatus(long userId, int sectionId);
        Task SwitchSearchCommentsVisibilityAsync(long userId);
        Task<bool> SwitchUserFreeSearchParamAsync(long userId);
        Task<bool> SwitchUserRTLanguageConsiderationAsync(long userId);

        //Adventures
        Task<string> RegisterAdventureAsync(ManageAdventure model);
        Task ChangeAdventureAsync(ManageAdventure model);
        Task<bool> DeleteAdventureAsync(Guid adventureId, long userId);
        Task<ParticipationRequestStatus> SendAdventureRequestAsync(long adventureId, long userId);
        Task<ParticipationRequestStatus> SendAdventureRequestByCodeAsync(ParticipationRequest request);
        Task<List<GetTemplateShort>> GetAdventureTemplatesAsync(long userId);
        Task<ManageTemplate> GetAdventureTemplateAsync(long id);
        Task<bool> ProcessSubscriptionRequestAsync(long adventureId, long userId, AdventureAttendeeStatus status);
        Task<List<AttendeeInfo>> GetAdventureAttendeesAsync(long adventureId);
        Task<List<Adventure>> GetUsersSubscribedAdventuresAsync(long userId);
        Task<List<GetAdventure>> GetUserAdventuresAsync(long userId);
        Task<ManageAdventure> GetAdventureAsync(long id);
        Task<bool> SaveAdventureTemplateAsync(ManageTemplate model);
        Task<DeleteResult> DeleteAdventureTemplateAsync(long templateId);
        Task<DeleteResult> DeleteAdventureAttendeeAsync(long adventureId, long attendeeId);
        Task<SetGroupIdResult> SetAdventureGroupIdAsync(SetGroupIdRequest request);
    }
}
