// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyWebApi.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyWebApi.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20221115101004_UpdateV2")]
    partial class UpdateV2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyWebApi.Entities.AchievementEntities.Achievement", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<int>("ConditionValue")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.ToTable("SYSTEM_ACHIEVEMENTS");
                });

            modelBuilder.Entity("MyWebApi.Entities.AchievementEntities.UserAchievement", b =>
                {
                    b.Property<long>("UserBaseInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("AchievementId")
                        .HasColumnType("bigint");

                    b.Property<int>("AchievementClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("AcquireMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsAcquired")
                        .HasColumnType("boolean");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.HasKey("UserBaseInfoId", "AchievementId");

                    b.HasIndex("AchievementId", "AchievementClassLocalisationId");

                    b.ToTable("USER_ACHIEVEMENTS");
                });

            modelBuilder.Entity("MyWebApi.Entities.AdminEntities.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("SYSTEM_ADMINS");
                });

            modelBuilder.Entity("MyWebApi.Entities.AdminEntities.AdminErrorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<long?>("ThrownByUser")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ADMIN_ERROR_LOGS");
                });

            modelBuilder.Entity("MyWebApi.Entities.AdminEntities.TickRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<string>("Circle")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<bool?>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Video")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tick_requests");
                });

            modelBuilder.Entity("MyWebApi.Entities.DailyRewardEntities.DailyReward", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("Index")
                        .HasColumnType("smallint");

                    b.Property<int>("PointReward")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DAILY_REWARDS");
                });

            modelBuilder.Entity("MyWebApi.Entities.DailyTaskEntities.DailyTask", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<int>("Condition")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Reward")
                        .HasColumnType("integer");

                    b.Property<short>("RewardCurrency")
                        .HasColumnType("smallint");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<short>("TaskType")
                        .HasColumnType("smallint");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.ToTable("DAILY_TASKS");
                });

            modelBuilder.Entity("MyWebApi.Entities.DailyTaskEntities.UserDailyTask", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("DailyTaskId")
                        .HasColumnType("bigint");

                    b.Property<string>("AcquireMessage")
                        .HasColumnType("text");

                    b.Property<int>("DailyTaskClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAcquired")
                        .HasColumnType("boolean");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "DailyTaskId");

                    b.HasIndex("DailyTaskId", "DailyTaskClassLocalisationId");

                    b.ToTable("USER_DAILY_TASKS");
                });

            modelBuilder.Entity("MyWebApi.Entities.EffectEntities.ActiveEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EffectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("ExpiresIn")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("USER_ACTIVE_EFFECTS");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocalisationEntities.AppLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageName")
                        .HasColumnType("text");

                    b.Property<string>("LanguageNameShort")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("APP_LANGUAGES");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocalisationEntities.ClassLocalisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CLASS_LOCALISATIONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocalisationEntities.Localisation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageName")
                        .HasColumnType("text");

                    b.Property<string>("SectionName")
                        .HasColumnType("text");

                    b.HasKey("Id", "SectionId");

                    b.ToTable("LOCALISATIONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocalisationEntities.SecondaryLocalisationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ElementName")
                        .HasColumnType("text");

                    b.Property<string>("ElementText")
                        .HasColumnType("text");

                    b.Property<int>("LocalisationId")
                        .HasColumnType("integer");

                    b.Property<int>("LocalisationSectionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalisationId", "LocalisationSectionId");

                    b.ToTable("SECONDARY_LOCALISATIONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocationEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("CountryClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("CityName")
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.HasKey("Id", "CountryClassLocalisationId");

                    b.HasIndex("CountryClassLocalisationId", "CountryId");

                    b.ToTable("CITIES");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocationEntities.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.ToTable("COUNTRIES");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocationEntities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("CityCountryClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityCountryClassLocalisationId", "CityId");

                    b.HasIndex("CountryClassLocalisationId", "CountryId");

                    b.ToTable("USER_LOCATIONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocationEntities.UpdateCountry", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.HasIndex("ClassLocalisationId");

                    b.ToTable("UpdateCountry");
                });

            modelBuilder.Entity("MyWebApi.Entities.ReasonEntities.FeedbackReason", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.ToTable("FEEDBACK_REASONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.ReportEntities.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReasonClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<short>("ReasonId")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long>("UserBaseInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserBaseInfoId");

                    b.HasIndex("ReasonId", "ReasonClassLocalisationId");

                    b.ToTable("SYSTEM_FEEDBACKS");
                });

            modelBuilder.Entity("MyWebApi.Entities.ReportEntities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReasonClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<short>("ReasonId")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long>("UserBaseInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserBaseInfoId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserBaseInfoId");

                    b.HasIndex("UserBaseInfoId1");

                    b.HasIndex("ReasonId", "ReasonClassLocalisationId");

                    b.ToTable("USER_REPORTS");
                });

            modelBuilder.Entity("MyWebApi.Entities.ReportEntities.ReportReason", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.ToTable("REPORT_REASONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.SecondaryEntities.AgePreference", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<short>("ClassLocalisationId")
                        .HasColumnType("smallint");

                    b.Property<string>("AgePrefName")
                        .HasColumnType("text");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.ToTable("AGE_PREFERENCES");
                });

            modelBuilder.Entity("MyWebApi.Entities.SecondaryEntities.CommunicationPreference", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("CommunicationPrefName")
                        .HasColumnType("text");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.ToTable("COMMUNICATION_PREFERENCES");
                });

            modelBuilder.Entity("MyWebApi.Entities.SecondaryEntities.Gender", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("GenderName")
                        .HasColumnType("text");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.HasIndex("ClassLocalisationId");

                    b.ToTable("SYSTEM_GENDERS");
                });

            modelBuilder.Entity("MyWebApi.Entities.SecondaryEntities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageName")
                        .HasColumnType("text");

                    b.Property<string>("LanguageNameNative")
                        .HasColumnType("text");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.HasIndex("ClassLocalisationId");

                    b.ToTable("LANGUAGES");
                });

            modelBuilder.Entity("MyWebApi.Entities.SecondaryEntities.UserReason", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonName")
                        .HasColumnType("text");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.ToTable("USER_REASONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.Ad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Video")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.ToTable("SPONSOR_ADS");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Bounty")
                        .HasColumnType("integer");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GroupLink")
                        .HasColumnType("text");

                    b.Property<bool>("HasGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<List<int?>>("Languages")
                        .HasColumnType("integer[]");

                    b.Property<short>("MaxAge")
                        .HasColumnType("smallint");

                    b.Property<short>("MinAge")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.ToTable("SPONSOR_EVENTS");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.EventTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Bounty")
                        .HasColumnType("integer");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<List<int?>>("Languages")
                        .HasColumnType("integer[]");

                    b.Property<short>("MaxAge")
                        .HasColumnType("smallint");

                    b.Property<short>("MinAge")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SPONSOR_EVENT_TEMPLATES");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.Sponsor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("CodeWord")
                        .HasColumnType("text");

                    b.Property<long?>("ContactInfoId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasBaseAccount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAwaiting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostponed")
                        .HasColumnType("boolean");

                    b.Property<long?>("StatsId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserAppLanguage")
                        .HasColumnType("integer");

                    b.Property<int>("UserCityId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCountryId")
                        .HasColumnType("integer");

                    b.Property<int>("UserMaxAdCount")
                        .HasColumnType("integer");

                    b.Property<int>("UserMaxAdViewCount")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("StatsId");

                    b.ToTable("SYSTEM_SPONSORS");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.SponsorContactInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tel")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("SPONSOR_CONTACT_INFO");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.SponsorLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("LanguageClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<short>("Level")
                        .HasColumnType("smallint");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.HasIndex("LanguageClassLocalisationId", "LanguageId");

                    b.ToTable("SPONSOR_LANGUAGES");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.SponsorNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<short>("NotificationReason")
                        .HasColumnType("smallint");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.ToTable("SPONSOR_NOTIFICATIONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.SponsorRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.HasIndex("UserId");

                    b.ToTable("SPONSOR_RATINGS");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.Stats", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<int>("ConductedEventsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<double>("LevelGoal")
                        .HasColumnType("double precision");

                    b.Property<double>("LevelProgress")
                        .HasColumnType("double precision");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SPONSOR_STATS");
                });

            modelBuilder.Entity("MyWebApi.Entities.TestEntities.PsychologicalTest", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.ToTable("psychological_tests");
                });

            modelBuilder.Entity("MyWebApi.Entities.TestEntities.PsychologicalTestAnswer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<long?>("PsychologicalTestQuestionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PsychologicalTestQuestionPsychologicalTestClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id", "ClassLocalisationId");

                    b.HasIndex("PsychologicalTestQuestionId", "PsychologicalTestQuestionPsychologicalTestClassLocalisationId");

                    b.ToTable("psychological_tests_answers");
                });

            modelBuilder.Entity("MyWebApi.Entities.TestEntities.PsychologicalTestQuestion", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("PsychologicalTestClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<long>("PsychologicalTestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id", "PsychologicalTestClassLocalisationId");

                    b.HasIndex("PsychologicalTestId", "PsychologicalTestClassLocalisationId");

                    b.ToTable("psychological_tests_questions");
                });

            modelBuilder.Entity("MyWebApi.Entities.TestEntities.TestPayload", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<int>("Agreeableness")
                        .HasColumnType("integer");

                    b.Property<int>("Compassion")
                        .HasColumnType("integer");

                    b.Property<int>("Creativity")
                        .HasColumnType("integer");

                    b.Property<int>("EmotionalIntellect")
                        .HasColumnType("integer");

                    b.Property<int>("Intellect")
                        .HasColumnType("integer");

                    b.Property<int>("LevelOfSense")
                        .HasColumnType("integer");

                    b.Property<int>("Nature")
                        .HasColumnType("integer");

                    b.Property<int>("OpenMindedness")
                        .HasColumnType("integer");

                    b.Property<int>("Personality")
                        .HasColumnType("integer");

                    b.Property<int>("Reliability")
                        .HasColumnType("integer");

                    b.Property<int>("SelfAwareness")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "TestId");

                    b.ToTable("USER_TESTS_RESULTS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserActionEntities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InvitationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("InvitedUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InvitorCredentialsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InvitorCredentialsId");

                    b.ToTable("USER_INVITATIONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserActionEntities.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsLikedBack")
                        .HasColumnType("boolean");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<short>("Severity")
                        .HasColumnType("smallint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("USER_NOTIFICATIONS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CardDecksMini")
                        .HasColumnType("integer");

                    b.Property<int>("CardDecksPlatinum")
                        .HasColumnType("integer");

                    b.Property<int>("Detectors")
                        .HasColumnType("integer");

                    b.Property<int>("PersonalityPoints")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PointInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("SecondChances")
                        .HasColumnType("integer");

                    b.Property<int>("ThePersonalities")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Valentines")
                        .HasColumnType("integer");

                    b.Property<int>("WhiteDetectors")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("USER_WALLET_BALANCES");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.BlackList", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("BannedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("BannedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("USER_BLACKLISTS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.Encounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EncounterDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EncounteredUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EncounteredUserId");

                    b.ToTable("USER_ENCOUNTERS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.InvitationCredentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("USER_INVITATION_CREDENTIALS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<short>("Currency")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("PointInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("USER_WALLET_PURCHASES");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<double>("BonusIndex")
                        .HasColumnType("double precision");

                    b.Property<short>("DailyRewardPoint")
                        .HasColumnType("smallint");

                    b.Property<bool>("HadReceivedReward")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPremium")
                        .HasColumnType("boolean");

                    b.Property<double>("InvitedUsersBonus")
                        .HasColumnType("double precision");

                    b.Property<int>("InvitedUsersCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIdentityConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxProfileViewsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PremiumExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProfileViewsCount")
                        .HasColumnType("integer");

                    b.Property<bool>("ShouldConsiderLanguages")
                        .HasColumnType("boolean");

                    b.Property<int>("TagSearchesCount")
                        .HasColumnType("integer");

                    b.Property<long>("UserBaseInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserDataInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserPreferencesId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.HasIndex("UserBaseInfoId");

                    b.HasIndex("UserDataInfoId");

                    b.HasIndex("UserPreferencesId");

                    b.ToTable("SYSTEM_USERS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.UserBaseInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsPhotoReal")
                        .HasColumnType("boolean");

                    b.Property<string>("UserDescription")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("text");

                    b.Property<string>("UserRawDescription")
                        .HasColumnType("text");

                    b.Property<string>("UserRealName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SYSTEM_USERS_BASES");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.UserDataInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AutoReplyText")
                        .HasColumnType("text");

                    b.Property<string>("AutoReplyVoice")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReasonClassLocalisationId")
                        .HasColumnType("integer");

                    b.Property<short>("ReasonId")
                        .HasColumnType("smallint");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<int>("UserAge")
                        .HasColumnType("integer");

                    b.Property<short>("UserGender")
                        .HasColumnType("smallint");

                    b.Property<List<int>>("UserLanguages")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ReasonId", "ReasonClassLocalisationId");

                    b.ToTable("SYSTEM_USERS_DATA");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.UserEvent", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("USER_EVENTS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.UserPersonalityPoints", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<int>("Agreeableness")
                        .HasColumnType("integer");

                    b.Property<double>("AgreeablenessPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("Compassion")
                        .HasColumnType("integer");

                    b.Property<double>("CompassionPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("Creativity")
                        .HasColumnType("integer");

                    b.Property<double>("CreativityPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("EmotionalIntellect")
                        .HasColumnType("integer");

                    b.Property<double>("EmotionalIntellectPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("Intellect")
                        .HasColumnType("integer");

                    b.Property<double>("IntellectPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("LevelOfSense")
                        .HasColumnType("integer");

                    b.Property<double>("LevelOfSensePercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("Nature")
                        .HasColumnType("integer");

                    b.Property<double>("NaturePercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("OpenMindedness")
                        .HasColumnType("integer");

                    b.Property<double>("OpenMindednessPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("Personality")
                        .HasColumnType("integer");

                    b.Property<double>("PersonalityPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("Reliability")
                        .HasColumnType("integer");

                    b.Property<double>("ReliabilityPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("SelfAwareness")
                        .HasColumnType("integer");

                    b.Property<double>("SelfAwarenessPercentage")
                        .HasColumnType("double precision");

                    b.HasKey("UserId");

                    b.ToTable("USER_PERSONALITY_POINTS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.UserPersonalityStats", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<int>("Agreeableness")
                        .HasColumnType("integer");

                    b.Property<int>("Compassion")
                        .HasColumnType("integer");

                    b.Property<int>("Creativity")
                        .HasColumnType("integer");

                    b.Property<int>("EmotionalIntellect")
                        .HasColumnType("integer");

                    b.Property<int>("Intellect")
                        .HasColumnType("integer");

                    b.Property<int>("LevelOfSense")
                        .HasColumnType("integer");

                    b.Property<int>("Nature")
                        .HasColumnType("integer");

                    b.Property<int>("OpenMindedness")
                        .HasColumnType("integer");

                    b.Property<int>("Personality")
                        .HasColumnType("integer");

                    b.Property<int>("Reliability")
                        .HasColumnType("integer");

                    b.Property<int>("SelfAwareness")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("USER_PERSONALITY_STATS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.UserPreferences", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<int>>("AgePrefs")
                        .HasColumnType("integer[]");

                    b.Property<int>("CommunicationPrefs")
                        .HasColumnType("integer");

                    b.Property<bool>("ShouldFilterUsersWithoutRealPhoto")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldUsePersonalityFunc")
                        .HasColumnType("boolean");

                    b.Property<short>("UserGenderPrefs")
                        .HasColumnType("smallint");

                    b.Property<List<int>>("UserLanguagePreferences")
                        .HasColumnType("integer[]");

                    b.Property<List<int>>("UserLocationPreferences")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.ToTable("SYSTEM_USERS_PREFERENCES");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.UserTrustLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Goal")
                        .HasColumnType("double precision");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<double>("Progress")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("USER_TRUST_LEVELS");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.Visit", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "SectionId");

                    b.ToTable("USER_VISITS");
                });

            modelBuilder.Entity("MyWebApi.Entities.AchievementEntities.UserAchievement", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.UserBaseInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserBaseInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.AchievementEntities.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId", "AchievementClassLocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyWebApi.Entities.AdminEntities.TickRequest", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyWebApi.Entities.DailyTaskEntities.UserDailyTask", b =>
                {
                    b.HasOne("MyWebApi.Entities.DailyTaskEntities.DailyTask", "DailyTask")
                        .WithMany()
                        .HasForeignKey("DailyTaskId", "DailyTaskClassLocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyTask");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocalisationEntities.SecondaryLocalisationModel", b =>
                {
                    b.HasOne("MyWebApi.Entities.LocalisationEntities.Localisation", null)
                        .WithMany("Loc")
                        .HasForeignKey("LocalisationId", "LocalisationSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Entities.LocationEntities.City", b =>
                {
                    b.HasOne("MyWebApi.Entities.LocationEntities.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryClassLocalisationId", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Entities.LocationEntities.Location", b =>
                {
                    b.HasOne("MyWebApi.Entities.LocationEntities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityCountryClassLocalisationId", "CityId");

                    b.HasOne("MyWebApi.Entities.LocationEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryClassLocalisationId", "CountryId");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocationEntities.UpdateCountry", b =>
                {
                    b.HasOne("MyWebApi.Entities.LocalisationEntities.ClassLocalisation", null)
                        .WithMany("Countries")
                        .HasForeignKey("ClassLocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Entities.ReportEntities.Feedback", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.UserBaseInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserBaseInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.ReasonEntities.FeedbackReason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId", "ReasonClassLocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reason");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyWebApi.Entities.ReportEntities.Report", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.UserBaseInfo", "Sender")
                        .WithMany()
                        .HasForeignKey("UserBaseInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.UserInfoEntities.UserBaseInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserBaseInfoId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.ReportEntities.ReportReason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId", "ReasonClassLocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reason");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyWebApi.Entities.SecondaryEntities.Gender", b =>
                {
                    b.HasOne("MyWebApi.Entities.LocalisationEntities.ClassLocalisation", null)
                        .WithMany("Genders")
                        .HasForeignKey("ClassLocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Entities.SecondaryEntities.Language", b =>
                {
                    b.HasOne("MyWebApi.Entities.LocalisationEntities.ClassLocalisation", null)
                        .WithMany("Languages")
                        .HasForeignKey("ClassLocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.Ad", b =>
                {
                    b.HasOne("MyWebApi.Entities.SponsorEntities.Sponsor", null)
                        .WithMany("SponsorAds")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.Event", b =>
                {
                    b.HasOne("MyWebApi.Entities.SponsorEntities.Sponsor", null)
                        .WithMany("SponsorEvents")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.Sponsor", b =>
                {
                    b.HasOne("MyWebApi.Entities.SponsorEntities.SponsorContactInfo", "SponsorContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoId");

                    b.HasOne("MyWebApi.Entities.SponsorEntities.Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId");

                    b.Navigation("SponsorContactInfo");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.SponsorLanguage", b =>
                {
                    b.HasOne("MyWebApi.Entities.SponsorEntities.Sponsor", null)
                        .WithMany("SponsorLanguages")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.SecondaryEntities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageClassLocalisationId", "LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.SponsorNotification", b =>
                {
                    b.HasOne("MyWebApi.Entities.SponsorEntities.Sponsor", "Reciever")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.SponsorRating", b =>
                {
                    b.HasOne("MyWebApi.Entities.SponsorEntities.Sponsor", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.UserInfoEntities.User", "Commentator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commentator");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("MyWebApi.Entities.TestEntities.PsychologicalTestAnswer", b =>
                {
                    b.HasOne("MyWebApi.Entities.TestEntities.PsychologicalTestQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("PsychologicalTestQuestionId", "PsychologicalTestQuestionPsychologicalTestClassLocalisationId");
                });

            modelBuilder.Entity("MyWebApi.Entities.TestEntities.PsychologicalTestQuestion", b =>
                {
                    b.HasOne("MyWebApi.Entities.TestEntities.PsychologicalTest", null)
                        .WithMany("Questions")
                        .HasForeignKey("PsychologicalTestId", "PsychologicalTestClassLocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Entities.UserActionEntities.Invitation", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.InvitationCredentials", "InvitorCredentials")
                        .WithMany()
                        .HasForeignKey("InvitorCredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitorCredentials");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserActionEntities.UserNotification", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("MyWebApi.Entities.UserInfoEntities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.BlackList", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.UserBaseInfo", "BannedUser")
                        .WithMany()
                        .HasForeignKey("BannedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.UserInfoEntities.User", null)
                        .WithMany("UserBlackList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BannedUser");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.Encounter", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.UserBaseInfo", "EncounteredUser")
                        .WithMany()
                        .HasForeignKey("EncounteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EncounteredUser");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.InvitationCredentials", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.User", "Invitor")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitor");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.User", b =>
                {
                    b.HasOne("MyWebApi.Entities.UserInfoEntities.UserBaseInfo", "UserBaseInfo")
                        .WithMany()
                        .HasForeignKey("UserBaseInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.UserInfoEntities.UserDataInfo", "UserDataInfo")
                        .WithMany()
                        .HasForeignKey("UserDataInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.UserInfoEntities.UserPreferences", "UserPreferences")
                        .WithMany()
                        .HasForeignKey("UserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserBaseInfo");

                    b.Navigation("UserDataInfo");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.UserDataInfo", b =>
                {
                    b.HasOne("MyWebApi.Entities.LocationEntities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.SecondaryEntities.UserReason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId", "ReasonClassLocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.UserEvent", b =>
                {
                    b.HasOne("MyWebApi.Entities.SponsorEntities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Entities.UserInfoEntities.User", "Attendee")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocalisationEntities.ClassLocalisation", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("Genders");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocalisationEntities.Localisation", b =>
                {
                    b.Navigation("Loc");
                });

            modelBuilder.Entity("MyWebApi.Entities.LocationEntities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MyWebApi.Entities.SponsorEntities.Sponsor", b =>
                {
                    b.Navigation("SponsorAds");

                    b.Navigation("SponsorEvents");

                    b.Navigation("SponsorLanguages");
                });

            modelBuilder.Entity("MyWebApi.Entities.TestEntities.PsychologicalTest", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MyWebApi.Entities.TestEntities.PsychologicalTestQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MyWebApi.Entities.UserInfoEntities.User", b =>
                {
                    b.Navigation("UserBlackList");
                });
#pragma warning restore 612, 618
        }
    }
}
